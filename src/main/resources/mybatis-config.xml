<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<!-- 通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties属性中指定的属性 -->
	<properties resource="db.properties" />
	
  	<settings>
  		<!-- 所有映射器中配置的缓存的全局开关。默认true -->
  		<setting name="cacheEnabled" value="true" />
  		
  		<!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认false -->
  		<setting name="lazyLoadingEnabled" value="false" />
  		
  		<!-- 当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载。默认true -->
  		<setting name="aggressiveLazyLoading" value="true" />
  		
  		<!-- 是否允许单一语句返回多结果集（需要兼容驱动）。默认true  -->
  		<setting name="multipleResultSetsEnabled" value="true" />
  		
  		<!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认true -->
  		<setting name="useColumnLabel" value="true" />
  		
  		<!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。默认false -->
  		<setting name="useGeneratedKeys" value="true" />
  		
  		<!-- 指定 MyBatis应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。
  			FULL 会自动映射任意复杂的结果集（无论是否嵌套）。默认PARTIAL -->
  		<setting name="autoMappingBehavior" value="PARTIAL" />
  		
  		<!-- 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。默认SIMPLE -->
  		<setting name="defaultExecutorType" value="SIMPLE" />
  		
  		<!-- 设置超时时间，它决定驱动等待数据库响应的秒数（正整数）。默认不设置 -->
  		<setting name="defaultStatementTimeout" value="1" />
  		
  		<!-- 允许在嵌套语句中使用分页。默认false -->
  		<setting name="safeRowBoundsEnabled" value="false" />
  		
  		<!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。默认false -->
  		<setting name="mapUnderscoreToCamelCase" value="false" />
  		
  		<!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 SESSION，这种情况下会缓存一个会话中执行的所有查询。
  		 	STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。默认SESSION -->
  		<setting name="localCacheScope" value="SESSION" />
  		
  		<!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。默认OTHER -->
  		<setting name="jdbcTypeForNull" value="OTHER" />
  		
  		<!-- 指定哪个对象的方法触发一次延迟加载。默认equals,clone,hashCode,toString  -->
  		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString " />
  		
  		<!-- 指定动态 SQL 生成的默认语言。  -->
  		<!-- <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver" /> -->
  		
  		<!-- 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。
  			注意基本类型（int、boolean等）是不能设置成 null 的。 默认false -->
  		<setting name="callSettersOnNulls" value="false" />
  		
  		<!-- 指定 MyBatis 增加到日志名称的前缀(任意字符串)。默认不设置  -->
  		<!-- <setting name="logPrefix" value="LiJingTang" /> -->
  		
  		<!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。默认不设置  -->
  		<!-- <setting name="logImpl" value="" /> -->
  		
  		<!-- 指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具(CGLIB | JAVASSIST)。默认不设置  -->
  		<setting name="proxyFactory" value="CGLIB" />
  		
  		<!-- 指定VFS实现。默认不设置  -->
  		<!-- <setting name="vfsImpl" value="" /> -->
  	</settings>
  	
  	<!-- 类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。 -->
	<typeAliases>
  		<!-- <typeAlias alias="blog" type="com.ljt.entity.Blog" /> -->
  		<!-- 每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。
  			 比如com.ljt.entity.Blog的别名为 blog；若有注解，则别名为其注解值。 -->
  		<package name="com.ljt.entity" />
  	</typeAliases>
  	
  	<typeHandlers>
  		<!--  通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：
  			在类型处理器的配置元素（typeHandler element）上增加一个 javaType 属性（比如：javaType="String"）；
    		在类型处理器的类上（TypeHandler class）增加一个 @MappedTypes 注解来指定与其关联的 Java 类型列表。 
    		如果在 javaType 属性中也同时指定，则注解方式将被忽略。
			可以通过两种方式来指定被关联的 JDBC 类型：
    		在类型处理器的配置元素上增加一个 javaType 属性（比如：jdbcType="VARCHAR"）；
    		在类型处理器的类上（TypeHandler class）增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。 
    		如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。
  		 -->
	  	<!-- <typeHandler handler="com.ljt.mybatis.handler.StringTypeHandler" javaType="String" jdbcType="VARCHAR" /> -->
	  	
	  	<!-- 处理枚举类型 -->
	  	<!-- <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="java.math.RoundingMode" /> -->
	  	
	  	<!-- 用自动检索（autodiscovery）功能的时候，只能通过注解方式来指定 JDBC 的类型。 -->
	  	<!-- <package name="com.ljt.mybatis.handler" /> -->
	</typeHandlers>
	
	<!-- ObjectFactory 接口很简单，它包含两个创建用的方法，一个是处理默认构造方法的，另外一个是处理带参数的构造方法的。
		 最后，setProperties 方法可以被用来配置 ObjectFactory，在初始化你的 ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。 -->
	<!-- <objectFactory type="com.ljt.mybatis.factory.MyObjectFactory">
		<property name="someProperty" value="100"/>
	</objectFactory> -->
	
	<!-- <plugins>
	  	<plugin interceptor="com.ljt.mybatis.plugin.MyPlugin">
	    	<property name="someProperty" value="100"/>
	  	</plugin>
	</plugins> -->

	<!-- 尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一 -->
 	<environments default="development">
    	<environment id="development"> <!-- 默认的环境和环境 ID 是一目了然的。随你怎么命名，只要保证默认环境要匹配其中一个环境ID。  -->
    	
      		<transactionManager type="JDBC" /> <!-- 在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”） -->
      		<!-- JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务范围。
				MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 
				默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。 -->
			<!-- <transactionManager type="MANAGED">
				<property name="closeConnection" value="false"/>
			</transactionManager> -->
			<!-- TransactionFactory Transaction 使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。 -->
			<!-- 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。 -->
			
      		<dataSource type="POOLED"> <!-- 三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”） -->
        		<property name="driver" value="${jdbc.driverClassName}" />
        		<property name="url" value="${jdbc.url}" />
        		<property name="username" value="${jdbc.username}" />
        		<property name="password" value="${jdbc.password}" />
      		</dataSource>
    	</environment>
  	</environments>
  	
  	<!-- MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射mapper语句中的 databaseId 属性。MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。
  		 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 -->
  	<!-- 可以通过实现接口 org.apache.ibatis.mapping.DatabaseIdProvider 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider(DB_VENDOR) -->
  	<databaseIdProvider type="DB_VENDOR" >
  		<property name="SQL Server" value="sqlserver" />
 		<property name="DB2" value="db2" />        
  		<property name="Oracle" value="oracle" />
  		<property name="MySQL" value="mysql" />
  	</databaseIdProvider>
  
  	<mappers>
  		<!-- 相对classpath路径 -->
    	<mapper resource="mapper/blog-mapper.xml" />
    	<mapper resource="mapper/user-mapper.xml" />
    	<mapper resource="mapper/senior-mapper.xml" />
    	<mapper resource="mapper/engineer-mapper.xml" />
    	<mapper resource="mapper/dynamic-mapper.xml" />
    	
    	<!-- 类名和包名  配合注解才能使用。XML配置方法不行 -->
    	<!-- <mapper class="com.ljt.dao.BlogMapper" /> -->
    	<!-- <package name="com.ljt.dao" /> -->
    	
    	<mapper class="com.ljt.dao.APIMapper"/>
  	</mappers>
  	
</configuration>